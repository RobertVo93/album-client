{"version":3,"sources":["Components/GridImage/CheckButton.jsx","Components/GridImage/GridImages.jsx","Configuration/Enum.ts","Configuration/api.config.ts","Services/common-api.service.ts","Services/image.service.ts","Components/Toolbar/Toolbar.tsx","classes/image.ts","Components/Paging/Paging.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CheckButton","props","state","hover","fill","bind","visibility","this","isSelected","selectedColor","hoverColor","color","isSelectable","parentHover","circleStyle","display","title","style","background","float","width","height","border","padding","cursor","pointerEvents","onClick","e","index","onMouseOver","setState","onMouseOut","viewBox","xmlns","id","cx","cy","r","gradientTransform","gradientUnits","offset","stopColor","stopOpacity","opacity","d","Component","defaultProps","Albums","GridImages","componentDidUpdate","refreshGrid","images","selectAllChecked","onSelectImage","getSelectedImages","onClickSelectAll","filter","img","length","slice","hasOwnProperty","allImagesSelected","selectedImages","i","push","textAlign","SelectAllStyle","SelectedImageStyle","GalaryContainerStyle","showLightboxThumbnails","React","alignItems","minHeight","overflow","ServerUploadURL","qs","require","apiConfig","timeout","Number","process","REACT_APP_API_TIMEOUT","baseURL","REACT_APP_SERVER_URL","headers","common","Accept","paramsSerializer","params","stringify","indices","commonAPI","config","numberOfRequest","api","axios","create","getUri","request","get","delete","head","post","put","patch","url","data","response","error","Imageservice","axiosConfig","res","success","album","fname","obj","objs","Toolbar","imageService","onClickUpload","open","onClickDelete","onCloseModal","onSelectAlbumChange","event","target","value","onFileChange","selectedFile","files","onFileUpload","formData","FormData","append","loopNumber","file","newName","Date","getTime","name","newFile","File","createNew","then","result","window","location","reload","albumOptions","Key","travel","Value","personal","food","nature","other","ContainerStyle","className","RightContainerStyle","noSelectedImages","RightToolbarStyle","Button","variant","startIcon","Modal","ModalStyle","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","Fade","in","PaperStyle","ModalHeaderStyle","onChange","multiple","type","FormControl","Select","map","val","MenuItem","key","margin","paddingTop","justifyContent","backgroundColor","Images","path","raw","thumbnailWidth","thumbnailHeight","src","thumbnail","thumbnailCaption","Paging","handleBackButtonClick","onChangePage","page","handleNextButtonClick","handleChangeRowsPerPage","onChangeRowsPerPage","rowsPerPageOptions","PagingCellStyle","rowsPerPage","IconButton","disabled","aria-label","count","App","imageRequestConfig","limit","skip","handleDeleteSelectedImage","getImagesByFilter","getAllData","message","documents","selected","JSON","deleteRequest","group","indexOf","reduce","gr","ele","join","deleteBulk","newPage","newRowsPerPage","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.94f5c16a.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\n\r\nexport class CheckButton extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hover: this.props.hover\r\n        };\r\n\r\n        this.fill = this.fill.bind(this);\r\n        this.visibility = this.visibility.bind(this);\r\n    }\r\n\r\n    fill () {\r\n        if (this.props.isSelected)\r\n            return this.props.selectedColor;\r\n        else if (this.state.hover)\r\n            return this.props.hoverColor;\r\n        return this.props.color;\r\n    }\r\n\r\n    visibility () {\r\n        if (this.props.isSelected ||\r\n            (this.props.isSelectable && this.props.parentHover))\r\n            return 'visible';\r\n        return 'hidden';\r\n    }\r\n\r\n    render () {\r\n        let circleStyle = {\r\n            display: this.props.isSelected ? \"block\" : \"none\"\r\n        };\r\n\r\n        return (\r\n                <div\r\n            title=\"Select\"\r\n            style={{\r\n                visibility: this.visibility(),\r\n                background: 'none',\r\n                float: 'left',\r\n                width: '36px',\r\n                height: '36px',\r\n                border: 'none',\r\n                padding: '6px',\r\n                cursor: 'pointer',\r\n                pointerEvents: 'visible'\r\n            }}\r\n            onClick={this.props.onClick ?\r\n                     (e) => this.props.onClick(this.props.index, e) : null\r\n            }\r\n            onMouseOver={(e) => this.setState({hover: true})}\r\n            onMouseOut={(e) => this.setState({hover: false})}>\r\n                <svg\r\n            fill={this.fill()}\r\n            height=\"24\" viewBox=\"0 0 24 24\"\r\n            width=\"24\"\r\n            xmlns=\"http://www.w3.org/2000/svg\">\r\n\r\n                <radialGradient\r\n            id=\"shadow\"\r\n            cx=\"38\"\r\n            cy=\"95.488\"\r\n            r=\"10.488\"\r\n            gradientTransform=\"matrix(1 0 0 -1 -26 109)\"\r\n            gradientUnits=\"userSpaceOnUse\">\r\n                <stop\r\n            offset=\".832\"\r\n            stopColor=\"#010101\">\r\n                </stop>\r\n                <stop\r\n            offset=\"1\"\r\n            stopColor=\"#010101\"\r\n            stopOpacity=\"0\">\r\n                </stop>\r\n                </radialGradient>\r\n\r\n                <circle\r\n            style={circleStyle}\r\n            opacity=\".26\"\r\n            fill=\"url(#shadow)\"\r\n            cx=\"12\" cy=\"13.512\"\r\n            r=\"10.488\">\r\n                </circle>\r\n                <circle\r\n            style={circleStyle}\r\n            fill=\"#FFF\"\r\n            cx=\"12\"\r\n            cy=\"12.2\"\r\n            r=\"8.292\">\r\n                </circle>\r\n                <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n                </svg>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nCheckButton.propTypes = {index: PropTypes.number,\r\n                         color: PropTypes.string,\r\n                         isSelectable: PropTypes.bool,\r\n                         isSelected: PropTypes.bool,\r\n                         selectedColor: PropTypes.string,\r\n                         parentHover: PropTypes.bool,\r\n                         hover: PropTypes.bool,\r\n                         hoverColor: PropTypes.string,\r\n                         onClick: PropTypes.func};\r\n\r\nCheckButton.defaultProps = {isSelectable: true,\r\n                            isSelected: false,\r\n                            parentHover: false,\r\n                            hover: false};","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Gallery from 'react-grid-gallery';\r\nimport { CheckButton } from './CheckButton';\r\n\r\nexport class GridImages extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            images: this.props.images,\r\n            selectAllChecked: false\r\n        };\r\n\r\n        this.onSelectImage = this.onSelectImage.bind(this);\r\n        this.getSelectedImages = this.getSelectedImages.bind(this);\r\n        this.onClickSelectAll = this.onClickSelectAll.bind(this);\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        if (this.props.refreshGrid) {\r\n            //only update grid when the parent component force to update\r\n            this.setState({\r\n                images: this.props.images,\r\n                selectAllChecked: false\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check list images (parameter) are all selected\r\n     * @param {*} images list images\r\n     */\r\n    allImagesSelected(images) {\r\n        var f = images.filter((img) => {\r\n            return img.isSelected === true;\r\n        });\r\n        return f.length === images.length;\r\n    }\r\n\r\n    /**\r\n     * Handle select image\r\n     * @param {*} index index of selected image\r\n     */\r\n    onSelectImage(index) {\r\n        //get the selected image\r\n        var images = this.state.images.slice();\r\n        var img = images[index];\r\n        //reverse flag of that image\r\n        img.isSelected = img.hasOwnProperty(\"isSelected\") ? !img.isSelected : true;\r\n        //update state\r\n        this.setState({\r\n            images: images,\r\n            selectAllChecked: this.allImagesSelected(images)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get all selected images\r\n     */\r\n    getSelectedImages() {\r\n        //get list of id of selected images\r\n        let selectedImages = [];\r\n        for (var i = 0; i < this.state.images.length; i++) {\r\n            if (this.state.images[i].isSelected === true) {\r\n                selectedImages.push(this.state.images[i].id);\r\n            }\r\n        }\r\n        //call the props callback function\r\n        this.props.getSelectedImages(selectedImages);\r\n        return selectedImages;\r\n    }\r\n\r\n    /**\r\n     * Handle onclick [select all] checkbox\r\n     */\r\n    onClickSelectAll() {\r\n        //reverse checkbox selection\r\n        var selectAllChecked = !this.state.selectAllChecked;\r\n        //update all images in current page\r\n        var images = this.state.images.slice();\r\n        for (var i = 0; i < this.state.images.length; i++)\r\n            images[i].isSelected = selectAllChecked;\r\n        //update state\r\n        this.setState({\r\n            images: images,\r\n            selectAllChecked: selectAllChecked\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ textAlign: \"center\" }}>\r\n                <CheckButton\r\n                    index={0}\r\n                    isSelected={this.state.selectAllChecked}\r\n                    onClick={this.onClickSelectAll}\r\n                    parentHover={true}\r\n                    color={\"rgba(0,0,0,0.54)\"}\r\n                    selectedColor={\"#4285f4\"}\r\n                    hoverColor={\"rgba(0,0,0,0.54)\"} />\r\n                <div style={SelectAllStyle}>\r\n                    select all\r\n                </div>\r\n                <div style={SelectedImageStyle}>Selected images: {this.getSelectedImages().length}</div>\r\n                <div style={GalaryContainerStyle}>\r\n                    <Gallery\r\n                        images={this.state.images}\r\n                        onSelectImage={this.onSelectImage}\r\n                        showLightboxThumbnails={true} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nGridImages.propTypes = {\r\n    images: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            src: PropTypes.string.isRequired,\r\n            thumbnail: PropTypes.string.isRequired,\r\n            srcset: PropTypes.array,\r\n            caption: PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.element\r\n            ]),\r\n            thumbnailWidth: PropTypes.number.isRequired,\r\n            thumbnailHeight: PropTypes.number.isRequired,\r\n            isSelected: PropTypes.bool\r\n        })\r\n    ).isRequired,\r\n    getSelectedImages: PropTypes.func.isRequired,\r\n    refreshGrid: PropTypes.bool.isRequired\r\n};\r\n\r\nconst SelectAllStyle = {\r\n    height: \"36px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n}\r\n\r\nconst SelectedImageStyle = {\r\n    padding: \"2px\",\r\n    color: \"#666\"\r\n}\r\n\r\nconst GalaryContainerStyle = {\r\n    display: \"block\",\r\n    minHeight: \"1px\",\r\n    width: \"100%\",\r\n    border: \"1px solid #ddd\",\r\n    overflow: \"auto\"\r\n}","export enum Albums {\r\n    food = 'Food',\r\n    nature = 'Nature',\r\n    other = 'Other',\r\n    personal = 'Personal',\r\n    travel = 'Travel'\r\n}\r\n\r\nexport const ServerUploadURL = 'http://localhost:8888/photos';","import { AxiosRequestConfig } from \"axios\";\r\nconst qs = require(\"qs\");\r\nexport const API_TIMEOUT = Number(process.env.REACT_APP_API_TIMEOUT) || 10000;\r\nexport const REACT_APP_SERVER_URL = process.env.REACT_APP_SERVER_URL || \"\";\r\n\r\nexport const apiConfig: AxiosRequestConfig = {\r\n    timeout: API_TIMEOUT,\r\n    baseURL: REACT_APP_SERVER_URL,\r\n    headers: {\r\n        common: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\"\r\n        }\r\n    },\r\n    paramsSerializer: (params: string) => qs.stringify(params, { indices: false })\r\n};\r\n","import axios, { AxiosError, AxiosRequestConfig, AxiosResponse, AxiosInstance } from \"axios\";\r\nimport { apiConfig } from \"../Configuration/api.config\";\r\n\r\n/**\r\n * ES6 Axios Class.\r\n *\r\n * @class Api\r\n * @extends {Axios}\r\n * @example\r\n * class UserApi extends Api {\r\n *   public constructor (config) {\r\n *     super(config);\r\n *\r\n *     this.login=this.login.bind(this);\r\n *   }\r\n *\r\n *   public login (user: User) {\r\n *     return this.api.post<string, User, AxiosResponse<User>>(\"https://www.domain/login\", {name: user.name, pass: user.pass})\r\n *        .then((res: AxiosResponse<string>) => res.data);\r\n *   }\r\n * }\r\n */\r\nclass Api {\r\n    [x: string]: any;\r\n    numberOfRequest: number;\r\n    api: AxiosInstance;\r\n    /**\r\n     * Creates an instance of Api.\r\n     *\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios configuration.\r\n     * @memberof Api\r\n     */\r\n    public constructor(config?: AxiosRequestConfig) {\r\n        this.api = axios.create(config);\r\n        this.numberOfRequest = 0;\r\n\r\n        this.getUri = this.getUri.bind(this);\r\n        this.request = this.request.bind(this);\r\n        this.get = this.get.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n        this.head = this.head.bind(this);\r\n        this.post = this.post.bind(this);\r\n        this.put = this.put.bind(this);\r\n        this.patch = this.patch.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get Uri\r\n     *\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config]\r\n     * @returns {string}\r\n     * @memberof Api\r\n     */\r\n    public getUri(config?: AxiosRequestConfig): string {\r\n        return this.api.getUri(config);\r\n    }\r\n\r\n    /**\r\n     * Generic request.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP axios response payload.\r\n     * @memberof Api\r\n     *\r\n     * @example\r\n     * api.request({\r\n     *   method: \"GET|POST|DELETE|PUT|PATCH\"\r\n     *   baseUrl: \"http://www.domain.com\",\r\n     *   url: \"/api/v1/users\",\r\n     *   headers: {\r\n     *     \"Content-Type\": \"application/json\"\r\n     *  }\r\n     * }).then((response: AxiosResponse<User>) => response.data)\r\n     *\r\n     */\r\n    public request<T, R = AxiosResponse<T>>(config: AxiosRequestConfig): Promise<R> {\r\n        return this.api.request(config);\r\n    }\r\n\r\n    /**\r\n     * HTTP GET method, used to fetch data `statusCode`: 200.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} HTTP `axios` response payload.\r\n     * @memberof Api\r\n     */\r\n    public get<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.get(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP DELETE method, `statusCode`: 204 No Content.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public delete<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.delete(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP HEAD method.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public head<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.head(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP POST method `statusCode`: 201 Created.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template B - `BODY`: body request object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {B} data - payload to be send as the `request body`,\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public post<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.post(url, data, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP PUT method.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template B - `BODY`: body request object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {B} data - payload to be send as the `request body`,\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public put<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.put(url, data, config);\r\n    }\r\n\r\n    /**\r\n      * HTTP PATCH method.\r\n      *\r\n      * @access public\r\n      * @template T - `TYPE`: expected object.\r\n      * @template B - `BODY`: body request object.\r\n      * @template R - `RESPONSE`: expected object inside a axios response format.\r\n      * @param {string} url - endpoint you want to reach.\r\n      * @param {B} data - payload to be send as the `request body`,\r\n      * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n      * @returns {Promise<R>} - HTTP [axios] response payload.\r\n      * @memberof Api\r\n      */\r\n    public patch<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.patch(url, data, config);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @template T - type.\r\n     * @param {import(\"axios\").AxiosResponse<T>} response - axios response.\r\n     * @returns {T} - expected object.\r\n     * @memberof Api\r\n     */\r\n    public success<T>(response: AxiosResponse<T>): T {\r\n        return response.data;\r\n    }\r\n\r\n    public error(error: AxiosError<Error>) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const commonAPI = new Api(apiConfig);","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { apiConfig } from \"../Configuration/api.config\";\r\nimport { Images } from \"../classes/image\";\r\nimport { commonAPI } from \"./common-api.service\";\r\nimport { ServerUploadURL } from '../Configuration/Enum';\r\nimport { ImageRequest, CommonResponse, ImageResponse, DeleteImageRequest} from '../interfaces';\r\n\r\nexport class Imageservice {\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.axiosConfig = apiConfig;\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(config: ImageRequest): Promise<ImageResponse> {\r\n        try {\r\n            const res = await commonAPI.post<string, ImageRequest, AxiosResponse<ImageResponse>>(`${ServerUploadURL}/list`, config);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get file by album and file name\r\n     * @param album album\r\n     * @param fname file name\r\n     */\r\n    public async getFile(album: string, fname: string): Promise<Images> {\r\n        try {\r\n            const res: AxiosResponse<Images> = await commonAPI.get(`${ServerUploadURL}/${album}/${fname}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * upload image\r\n     * @param obj form data\r\n     */\r\n    public async createNew(obj: FormData): Promise<Images[]> {\r\n        try {\r\n            const res = await commonAPI.put<string, FormData, AxiosResponse<Images[]>>(`${ServerUploadURL}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete bulk\r\n     * @param objs all file\r\n     */\r\n    public async deleteBulk(objs: DeleteImageRequest[]): Promise<CommonResponse> {\r\n        try {\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete<string, AxiosResponse<CommonResponse>>(`${ServerUploadURL}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete target file\r\n     * @param album album\r\n     * @param fname file name\r\n     */\r\n    public async delete(album: string, fname: string): Promise<CommonResponse> {\r\n        try {\r\n            const res = await commonAPI.delete<string, AxiosResponse<CommonResponse>>(`${ServerUploadURL}/${album}/${fname}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport './Toolbar.css';\r\nimport { KeyValue } from '../../interfaces/KeyValue';\r\nimport { Albums } from '../../Configuration/Enum';\r\nimport { Imageservice } from '../../Services/image.service';\r\n\r\ninterface ToolbarProps {\r\n    onClickDelete: () => void,\r\n    noSelectedImages?: number\r\n}\r\n\r\ninterface ToolbarState {\r\n    album: string,\r\n    open: boolean,\r\n    selectedFile: any[],\r\n    albumOptions: KeyValue<string, string>[]\r\n}\r\n\r\nexport class Toolbar extends React.Component<ToolbarProps, ToolbarState> {\r\n    imageService: Imageservice;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            selectedFile: [],\r\n            albumOptions: [\r\n                { Key: Albums.travel, Value: Albums.travel },\r\n                { Key: Albums.personal, Value: Albums.personal },\r\n                { Key: Albums.food, Value: Albums.food },\r\n                { Key: Albums.nature, Value: Albums.nature },\r\n                { Key: Albums.other, Value: Albums.other }\r\n            ],\r\n            album: Albums.travel\r\n        }\r\n        this.imageService = new Imageservice();\r\n    }\r\n\r\n    /**\r\n     * fire event onclick upload button\r\n     */\r\n    onClickUpload = () => {\r\n        this.setState({ open: true });\r\n    }\r\n\r\n    /**\r\n     * fire event onclick delete button\r\n     */\r\n    onClickDelete = () => {\r\n        this.props.onClickDelete();\r\n    }\r\n\r\n    /**\r\n     * Handle close modal\r\n     */\r\n    onCloseModal = () => {\r\n        this.setState({ open: false });\r\n    }\r\n\r\n    /**\r\n     * Handle action select album\r\n     * @param event event\r\n     */\r\n    onSelectAlbumChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        this.setState({\r\n            album: event.target.value as string\r\n        });\r\n    }\r\n\r\n    /**\r\n     * update selected files to state\r\n     * @param event \r\n     */\r\n    onFileChange = (event: any) => {\r\n        this.setState({\r\n            selectedFile: event.target.files\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle action upload file\r\n     */\r\n    onFileUpload = () => {\r\n        if (this.state.selectedFile.length > 0) {\r\n            // Create the formData object with album and the uploaded files\r\n            const formData = new FormData();\r\n            formData.append(\"album\", this.state.album);\r\n            let loopNumber = this.state.selectedFile.length;\r\n            //append all files to FormData object\r\n            for (let index = 0; index < loopNumber; index++) {\r\n                let file = this.state.selectedFile[index];\r\n                //rename the upload files\r\n                let newName = `${new Date().getTime()} - ${file.name}`;\r\n                let newFile = new File([file], newName);\r\n                formData.append(\"documents\", newFile);\r\n            }\r\n            // Send API with formData object to server\r\n            this.imageService.createNew(formData)\r\n                .then((result) => {\r\n                    window.location.reload();\r\n                });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={ContainerStyle}>\r\n                <div className=\"float-left\">\r\n                    <h2>Photos</h2>\r\n                </div>\r\n                <div style={RightContainerStyle}>\r\n                    {\r\n                        this.props.noSelectedImages ?\r\n                            (\r\n                                <div style={RightToolbarStyle}>\r\n                                    <Button\r\n                                        onClick={this.onClickDelete}\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        startIcon={<DeleteIcon />}\r\n                                    >\r\n                                        Delete\r\n                                    </Button>\r\n                                </div>\r\n                            ) : ('')\r\n                    }\r\n                    <div style={RightToolbarStyle}>\r\n                        <Button\r\n                            onClick={this.onClickUpload}\r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            startIcon={<CloudUploadIcon />}\r\n                        >\r\n                            Upload\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <Modal\r\n                    style={ModalStyle}\r\n                    aria-labelledby=\"transition-modal-title\"\r\n                    aria-describedby=\"transition-modal-description\"\r\n                    open={this.state.open}\r\n                    onClose={this.onCloseModal}\r\n                    closeAfterTransition\r\n                    BackdropComponent={Backdrop}\r\n                    BackdropProps={{\r\n                        timeout: 500,\r\n                    }}\r\n                >\r\n                    <Fade in={this.state.open}>\r\n                        <div style={PaperStyle}>\r\n                            <div className=\"header\" style={ModalHeaderStyle}>\r\n                                <div className=\"float-left\"><h3>Upload photos</h3></div>\r\n                                <div className=\"close-popup-button\"><div onClick={() => this.onCloseModal()}>X</div></div>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"custom-file\">\r\n                                    <p className=\"drag-drop-label\">\r\n                                        {\r\n                                            this.state.selectedFile && this.state.selectedFile.length > 0 ?\r\n                                                (`Selected: ${this.state.selectedFile.length} file(s)`)\r\n                                                :\r\n                                                (`Drag 'n' drop some files here, or click to select files`)\r\n                                        }\r\n                                    </p>\r\n                                    <input className=\"custom-file-name-textbox\"\r\n                                        onChange={this.onFileChange} multiple\r\n                                        id=\"inputGroupFile01\" name=\"images\" type=\"file\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <FormControl className=\"float-left album-select\">\r\n                                    <Select\r\n                                        value={this.state.album}\r\n                                        onChange={this.onSelectAlbumChange}\r\n                                    >\r\n                                        {\r\n                                            this.state.albumOptions.map((val) => (\r\n                                                <MenuItem key={val.Key} value={val.Key}>{val.Value}</MenuItem>\r\n                                            ))\r\n                                        }\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <Button\r\n                                    onClick={this.onFileUpload}\r\n                                    className=\"float-right\"\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    startIcon={<CloudUploadIcon />}\r\n                                >\r\n                                    Upload\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Fade>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst ContainerStyle: React.CSSProperties = {\r\n    display: 'inline-block',\r\n    width: '100%',\r\n    margin: '0 10px 0 10px',\r\n    paddingTop: 30\r\n}\r\n\r\nconst RightContainerStyle: React.CSSProperties = {\r\n    display: 'flex',\r\n    float: 'right',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    minHeight: 75\r\n}\r\n\r\nconst RightToolbarStyle: React.CSSProperties = {\r\n    display: 'inline-block',\r\n    margin: '0 10px 0 10px'\r\n}\r\n\r\nconst ModalStyle: React.CSSProperties = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    width: '40%',\r\n    margin: 'auto'\r\n}\r\n\r\nconst PaperStyle: React.CSSProperties = {\r\n    border: '2px solid #000',\r\n    backgroundColor: '#ffffff',\r\n    padding: 25,\r\n    width: '100%'\r\n}\r\n\r\nconst ModalHeaderStyle: React.CSSProperties = {\r\n    width: '100%',\r\n    display: 'inline-block'\r\n}","export class Images {\r\n    constructor(obj?: any) {\r\n        this.id = obj?.id;\r\n        this.album = obj?.album;\r\n        this.name = obj?.name;\r\n        this.path = obj?.path;\r\n        this.raw = obj?.raw;\r\n        this.thumbnailWidth = 250;\r\n        this.thumbnailHeight = 150;\r\n        this.src = obj?.raw;\r\n        this.thumbnail = obj?.raw;\r\n        this.thumbnailCaption = obj?.name;\r\n    }\r\n    id: string;\r\n    album: string;\r\n    name: string;\r\n    path: string;\r\n    raw: string;\r\n    //properties support to display images on screen \r\n    thumbnailWidth: number;\r\n    thumbnailHeight: number;\r\n    src: string;\r\n    thumbnail: string;\r\n    thumbnailCaption: any;\r\n}","import React from 'react';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\n\r\nimport { KeyValue } from '../../interfaces';\r\n\r\ninterface PagingProps {\r\n    count: number,\r\n    rowsPerPage: number,\r\n    page: number,\r\n    onChangePage: (newPage: number) => void,\r\n    onChangeRowsPerPage: (newRowsPerPage: number) => void\r\n}\r\n\r\ninterface PagingState {\r\n    rowsPerPageOptions: KeyValue<number, number>[]\r\n}\r\n\r\nexport class Paging extends React.Component<PagingProps, PagingState> {\r\n    constructor(props: PagingProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            rowsPerPageOptions: [\r\n                { Key: 10, Value: 10 },\r\n                { Key: 25, Value: 25 },\r\n                { Key: 50, Value: 50 },\r\n                { Key: 100, Value: 100 }\r\n            ]\r\n        }\r\n        this.handleNextButtonClick = this.handleNextButtonClick.bind(this);\r\n        this.handleBackButtonClick = this.handleBackButtonClick.bind(this);\r\n    }\r\n    \r\n    /**\r\n     * Handle action go to the previous page\r\n     */\r\n    handleBackButtonClick = () => {\r\n        this.props.onChangePage(this.props.page - 1);\r\n    }\r\n\r\n    /**\r\n     * Handle action go to the next page\r\n     */\r\n    handleNextButtonClick = () => {\r\n        this.props.onChangePage(this.props.page + 1);\r\n    }\r\n\r\n    /**\r\n     * Handle action change number of records per page\r\n     * @param event react change event\r\n     */\r\n    handleChangeRowsPerPage = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        this.props.onChangeRowsPerPage(event.target.value as number);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"width100\">\r\n                <div className=\"float-right\">\r\n                    <div style={PagingCellStyle}>Rows per page:</div>\r\n                    <div style={PagingCellStyle}>\r\n                        <FormControl style={{width: 60}}>\r\n                            <Select\r\n                                style={{width: 60}}\r\n                                value={this.props.rowsPerPage}\r\n                                onChange={this.handleChangeRowsPerPage}\r\n                            >\r\n                                {\r\n                                    this.state.rowsPerPageOptions.map((val) => (\r\n                                        <MenuItem key={val.Key} value={val.Key}>{val.Value}</MenuItem>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div style={PagingCellStyle}>\r\n                        <IconButton\r\n                            onClick={this.handleBackButtonClick}\r\n                            disabled={this.props.page === 0}\r\n                            aria-label=\"previous page\"\r\n                        >\r\n                            <KeyboardArrowLeft />\r\n                        </IconButton>\r\n                        <IconButton\r\n                            onClick={this.handleNextButtonClick}\r\n                            disabled={this.props.count < this.props.rowsPerPage}\r\n                            aria-label=\"next page\"\r\n                        >\r\n                            <KeyboardArrowRight />\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst PagingCellStyle: React.CSSProperties = {\r\n    display: 'inline-block',\r\n    margin: '0 10px 0 10px'\r\n}","import React, { Component } from 'react';\n\nimport './App.css';\nimport { GridImages } from './Components/GridImage/GridImages';\nimport { Toolbar } from './Components/Toolbar/Toolbar';\nimport { Imageservice } from './Services/image.service';\nimport { Images } from './classes/image';\nimport { ImageRequest, DeleteImageRequest } from './interfaces';\nimport { Paging } from '../src/Components/Paging/Paging';\n\ninterface AppState {\n\timages: Images[],\n\timageRequestConfig: ImageRequest,\n\tselectedImages: string[],\n\tcount: number,\n\trowsPerPage: number,\n\tpage: number,\n\trefreshGrid: boolean\n}\n\nclass App extends Component<{}, AppState> {\n\timageService: Imageservice;\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\timages: [],\n\t\t\timageRequestConfig: {\n\t\t\t\tlimit: 25,\n\t\t\t\tskip: 0\n\t\t\t},\n\t\t\tselectedImages: [],\n\t\t\tcount: 0,\n\t\t\trowsPerPage: 25,\n\t\t\tpage: 0,\n\t\t\trefreshGrid: false\n\t\t};\n\n\t\tthis.imageService = new Imageservice();\n\t\tthis.handleDeleteSelectedImage = this.handleDeleteSelectedImage.bind(this);\n\t\tthis.getSelectedImages = this.getSelectedImages.bind(this);\n\t\tthis.onChangeRowsPerPage = this.onChangeRowsPerPage.bind(this);\n\t\tthis.onChangePage = this.onChangePage.bind(this);\n\t\tthis.getImagesByFilter = this.getImagesByFilter.bind(this);\n\t}\n\n\tasync componentDidMount() {\n\t\t//get initial data\n\t\tthis.getImagesByFilter();\n\t}\n\n\tprivate async getImagesByFilter() {\n\t\t//get all images from db by filtered\n\t\tlet response = await this.imageService.getAllData(this.state.imageRequestConfig);\n\t\tif (response.message === \"OK\") {\n\t\t\t//update state\n\t\t\tlet images = response.documents.map(val => new Images(val));\n\t\t\tthis.setState({\n\t\t\t\timages,\n\t\t\t\tcount: response.count,\n\t\t\t\trefreshGrid: true\n\t\t\t}, () => {\n\t\t\t\t//update flag to let GridImage stop refreshing the grid\n\t\t\t\tthis.setState({ refreshGrid: false });\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Callback: Handle selected images changed callback\n\t * @param selected selected images [id]\n\t */\n\tgetSelectedImages(selected: string[]) {\n\t\t//check if selected images are changed\n\t\tif (JSON.stringify(selected) !== JSON.stringify(this.state.selectedImages)) {\n\t\t\tthis.setState({\n\t\t\t\tselectedImages: selected\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Callback: Handle delete the selected images\n\t */\n\tasync handleDeleteSelectedImage() {\n\t\tif (this.state.selectedImages.length === 0)\n\t\t\treturn;\n\t\t//define delete request object\n\t\tlet deleteRequest: DeleteImageRequest[] = [];\n\t\t//group all deleted images by album\n\t\tlet group = this.state.images\n\t\t\t.filter((img: Images) => {\n\t\t\t\t//get all selected images object by their id\n\t\t\t\treturn this.state.selectedImages.indexOf(img.id) !== -1;\n\t\t\t}).reduce((gr: any, ele) => {\n\t\t\t\t//group them by album\n\t\t\t\tgr[ele.album] = [...gr[ele.album] || [], ele];\n\t\t\t\treturn gr;\n\t\t\t}, {});\n\n\t\t//setup delete request object\n\t\tfor (let key in group) {\n\t\t\tdeleteRequest.push({\n\t\t\t\talbum: key,\n\t\t\t\tdocuments: group[key].map((img: Images) => img.name).join(', ')\n\t\t\t});\n\t\t}\n\t\t//send API\n\t\tthis.imageService.deleteBulk(deleteRequest).then((res) => {\n\t\t\tif (res.message === \"OK\") {\n\t\t\t\twindow.location.reload();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Callback: listen page change in Paging component\n\t * @param newPage new page\n\t */\n\tasync onChangePage(newPage: number) {\n\t\t//setup request config\n\t\tlet imageRequestConfig = {\n\t\t\tlimit: this.state.rowsPerPage,\n\t\t\tskip: newPage * this.state.rowsPerPage\n\t\t}\n\t\t//update state\n\t\tthis.setState({\n\t\t\timageRequestConfig,\n\t\t\tpage: newPage\n\t\t}, () => {\n\t\t\t//get new list of images\n\t\t\tthis.getImagesByFilter();\n\t\t});\n\n\t}\n\n\t/**\n\t * Callback: Listen action change numer of records per page in paging component\n\t * @param newRowsPerPage \n\t */\n\tasync onChangeRowsPerPage(newRowsPerPage: number) {\n\t\t//setup request config\n\t\tlet imageRequestConfig = {\n\t\t\tlimit: newRowsPerPage,\n\t\t\tskip: 0\n\t\t}\n\t\t//update state\n\t\tthis.setState({\n\t\t\timageRequestConfig,\n\t\t\trowsPerPage: newRowsPerPage,\n\t\t\tpage: 0\n\t\t}, () => {\n\t\t\t//get new list of images\n\t\t\tthis.getImagesByFilter();\n\t\t});\n\t}\n\n\trender() {\n\t\t//Update display value for thumbnail Caption of each image\n\t\tlet images = this.state.images.map((img: Images) => {\n\t\t\timg.thumbnailCaption = (\n\t\t\t\t<div>\n\t\t\t\t\t<div><strong>{img.name}</strong></div>\n\t\t\t\t\t<div>{img.album}</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t\treturn img;\n\t\t});\n\t\treturn (\n\t\t\t<div style={{\n\t\t\t\twidth: '80%',\n\t\t\t\tmargin: 'auto'\n\t\t\t}}>\n\t\t\t\t<Toolbar onClickDelete={this.handleDeleteSelectedImage} noSelectedImages={this.state.selectedImages.length} />\n\t\t\t\t<Paging count={this.state.count}\n\t\t\t\t\tpage={this.state.page}\n\t\t\t\t\trowsPerPage={this.state.rowsPerPage}\n\t\t\t\t\tonChangePage={this.onChangePage}\n\t\t\t\t\tonChangeRowsPerPage={this.onChangeRowsPerPage} />\n\t\t\t\t<GridImages images={images}\n\t\t\t\t\tgetSelectedImages={this.getSelectedImages}\n\t\t\t\t\trefreshGrid={this.state.refreshGrid} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}